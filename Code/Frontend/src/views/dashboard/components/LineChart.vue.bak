<template>
  <div :class="className" :style="{height:height,width:width}"></div>
</template>

<script>
import echarts from 'echarts'

require('echarts/theme/macarons')
import { debounce, getSevenDayArray } from '@/utils'

export default {
  data() {
    return {
      chart: null,
      dateData: []
    }
  },
  props: {
    className: {
      type: String,
      default: 'chart'
    },
    width: {
      type: String,
      default: '100%'
    },
    height: {
      type: String,
      default: '350px'
    },
    autoResize: {
      type: Boolean,
      default: true
    },
    chartData: {
      type: Object
    }
  },
  mounted() {
    this.initChart()
    if (this.autoResize) {
      this.__resizeHanlder = debounce(() => {
        if (this.chart) {
          this.chart.resize()
        }
      }, 100)
      window.addEventListener('resize', this.__resizeHanlder)
    }
    // 监听侧边栏的变化
    const sidebarElm = document.getElementsByClassName('sidebar-container')[0]
    sidebarElm.addEventListener('transitionend', this.__resizeHanlder)
  },
  beforeDestroy() {
    if (!this.chart) {
      return
    }
    if (this.autoResize) {
      window.removeEventListener('resize', this.__resizeHanlder)
    }

    const sidebarElm = document.getElementsByClassName('sidebar-container')[0]
    sidebarElm.removeEventListener('transitionend', this.__resizeHanlder)

    this.chart.dispose()
    this.chart = null
  },
  created() {
    this.getSevenDayArray()
  },
  watch: {
    chartData: {
      deep: true,
      handler(val) {
        this.setOptions(val)
      }
    }
  },
  methods: {
    setOptions({ normalData, variationData, comboData } = {}) {
      this.chart.setOption({
        grid: {
          left: 20,
          right: 30,
          bottom: 20,
          top: 36,
          containLabel: true
        },
        toolbox: {
          right: 30,
          feature: {
            magicType: {
              type: ['line', 'bar']
            },
            dataView: {
              readOnly: true
            },
            // dataZoom: {},
            restore: {},
            saveAsImage: {}
          }
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'cross'
          },
          padding: [5, 10]
        },
        xAxis: {
          // type: 'category',
          boundaryGap: false,
          data: this.dateData
        },
        yAxis: {
          type: 'value',
          axisTick: {
            show: false
          }
        },
        legend: {
          data: ['Normal', 'Variation', 'Combo']
        },
        series: [{
          name: 'Normal',
          itemStyle: {
            normal: {
              color: '#F56C6C',
              lineStyle: {
                color: '#F56C6C',
                width: 2
              }
            }
          },
          smooth: 0,
          type: 'line',
          data: normalData
        }, {
          name: 'Variation',
          itemStyle: {
            normal: {
              color: '#E6A23C',
              lineStyle: {
                color: '#E6A23C',
                width: 2
              }
            }
          },
          smooth: 0,
          type: 'line',
          data: variationData
        }, {
          name: 'Combo',
          itemStyle: {
            normal: {
              color: '#67C23A',
              lineStyle: {
                color: '#67C23A',
                width: 2
              }
            }
          },
          smooth: 0,
          type: 'line',
          data: comboData
        }]
      })
    },
    initChart() {
      this.chart = echarts.init(this.$el, 'macarons')
      this.setOptions(this.chartData)
    },
    getSevenDayArray() {
      this.dateData = getSevenDayArray()
    }
  }
}
</script>
